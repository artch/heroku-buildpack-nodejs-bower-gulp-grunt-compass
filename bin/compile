#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

# Look in package.json's engines.node field for a semver range
semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  protip "Specify a node version in package.json"bu
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

# ...

# this is required to execute bundle and store gems in cachedir
# we do it globally because we want to be able to run bundle even
# from within grunt
export HOME=$build_dir
export GEM_HOME=$build_dir/.gem/ruby/2.2.0
export PATH="$GEM_HOME/bin:$PATH"

(
  # porting in compass install
  # install compass
  status "Installing Compass"
  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF8
  if test -d $cache_dir/ruby/.gem; then
    status "Restoring ruby gems directory from cache"
    cp -r $cache_dir/ruby/.gem $build_dir
    gem update bundler --user-install --no-rdoc --no-ri 2>&1 | indent
  else
    gem install bundler --user-install --no-rdoc --no-ri 2>&1 | indent
  fi
  
  # Run bundler
  bundle install 2>&1 | indent

  # Run compass
  #HOME=$build_dir bundle exec compass compile
  
  echo "ls $build_dir"
ls -lA $build_dir
echo "ls $build_dir/.gem"
ls -lA $build_dir/.gem
echo "ls $build_dir/.gem/ruby"
ls -lA $build_dir/.gem/ruby  
echo "ls $build_dir/vendor"
ls -lA $build_dir/vendor
echo "ls $build_dir/vendor/bundle"
ls -lA $build_dir/vendor/bundle
)

# cache ruby gems compass
rm -rf $cache_dir/ruby
mkdir -p $cache_dir/ruby

# If app has a gems directory, cache it.
if test -d $build_dir/.gem; then
  status "Caching ruby gems directory for future builds"
  cp -r $build_dir/.gem $cache_dir/ruby
fi

status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh
echo "export PATH=\"\$HOME/.gem/ruby/1.9.1/bin:\$PATH\"" > $build_dir/.profile.d/ruby.sh

# Update the PATH
status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh

# Check and run gulp
(
  if [ $run_gulp -ne 0 ]; then
    # get the env vars
    if [ -d "$env_dir" ]; then
      status "Exporting config vars to environment"
      export_env_dir $env_dir
    fi

    echo "-----> Found gulpfile, running gulp heroku:$NODE_ENV task"
    $build_dir/node_modules/.bin/gulp heroku:$NODE_ENV 2>&1 | indent
  else
    echo "-----> No gulpfile found"
  fi
)

# Check and run grunt
(
  if [ $run_grunt -ne 0 ]; then
    # get the env vars
    if [ -d "$env_dir" ]; then
      status "Exporting config vars to environment"
      export_env_dir $env_dir
    fi

    echo "-----> Found Gruntfile, running grunt heroku:$NODE_ENV task"
    $build_dir/node_modules/.bin/grunt heroku:$NODE_ENV 2>&1 | indent
  else
    echo "-----> No Gruntfile found"
  fi
)


# Post package.json to nomnom service
# Use a subshell so failures won't break the build.
(
  curl \
    --data @$build_dir/package.json \
    --fail \
    --silent \
    --request POST \
    --header "content-type: application/json" \
    https://nomnom.heroku.com/?request_id=$REQUEST_ID \
    > /dev/null
) &
